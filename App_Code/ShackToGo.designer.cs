#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="ShackToGo")]
public partial class ShackToGoDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBookMark(BookMark instance);
  partial void UpdateBookMark(BookMark instance);
  partial void DeleteBookMark(BookMark instance);
  partial void InsertShackUser(ShackUser instance);
  partial void UpdateShackUser(ShackUser instance);
  partial void DeleteShackUser(ShackUser instance);
  #endregion
	
	public ShackToGoDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ShackToGoConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ShackToGoDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ShackToGoDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ShackToGoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ShackToGoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<BookMark> BookMarks
	{
		get
		{
			return this.GetTable<BookMark>();
		}
	}
	
	public System.Data.Linq.Table<ShackUser> ShackUsers
	{
		get
		{
			return this.GetTable<ShackUser>();
		}
	}
}

[Table(Name="dbo.BookMarks")]
public partial class BookMark : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BookMarkID;
	
	private int _UserID;
	
	private string _ThreadID;
	
	private string _StoryID;
	
	private string _Desc;
	
	private string _PosterName;
	
	private string _PostCreated;
	
	private int _ReplyCount;
	
	private System.DateTime _DateCreated;
	
	private bool _Deleted;
	
	private EntityRef<ShackUser> _ShackUser;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookMarkIDChanging(int value);
    partial void OnBookMarkIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnThreadIDChanging(string value);
    partial void OnThreadIDChanged();
    partial void OnStoryIDChanging(string value);
    partial void OnStoryIDChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnPosterNameChanging(string value);
    partial void OnPosterNameChanged();
    partial void OnPostCreatedChanging(string value);
    partial void OnPostCreatedChanged();
    partial void OnReplyCountChanging(int value);
    partial void OnReplyCountChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
	
	public BookMark()
	{
		this._ShackUser = default(EntityRef<ShackUser>);
		OnCreated();
	}
	
	[Column(Storage="_BookMarkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int BookMarkID
	{
		get
		{
			return this._BookMarkID;
		}
		set
		{
			if ((this._BookMarkID != value))
			{
				this.OnBookMarkIDChanging(value);
				this.SendPropertyChanging();
				this._BookMarkID = value;
				this.SendPropertyChanged("BookMarkID");
				this.OnBookMarkIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._ShackUser.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ThreadID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string ThreadID
	{
		get
		{
			return this._ThreadID;
		}
		set
		{
			if ((this._ThreadID != value))
			{
				this.OnThreadIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadID = value;
				this.SendPropertyChanged("ThreadID");
				this.OnThreadIDChanged();
			}
		}
	}
	
	[Column(Storage="_StoryID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string StoryID
	{
		get
		{
			return this._StoryID;
		}
		set
		{
			if ((this._StoryID != value))
			{
				this.OnStoryIDChanging(value);
				this.SendPropertyChanging();
				this._StoryID = value;
				this.SendPropertyChanged("StoryID");
				this.OnStoryIDChanged();
			}
		}
	}
	
	[Column(Name="[Desc]", Storage="_Desc", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Desc
	{
		get
		{
			return this._Desc;
		}
		set
		{
			if ((this._Desc != value))
			{
				this.OnDescChanging(value);
				this.SendPropertyChanging();
				this._Desc = value;
				this.SendPropertyChanged("Desc");
				this.OnDescChanged();
			}
		}
	}
	
	[Column(Storage="_PosterName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string PosterName
	{
		get
		{
			return this._PosterName;
		}
		set
		{
			if ((this._PosterName != value))
			{
				this.OnPosterNameChanging(value);
				this.SendPropertyChanging();
				this._PosterName = value;
				this.SendPropertyChanged("PosterName");
				this.OnPosterNameChanged();
			}
		}
	}
	
	[Column(Storage="_PostCreated", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string PostCreated
	{
		get
		{
			return this._PostCreated;
		}
		set
		{
			if ((this._PostCreated != value))
			{
				this.OnPostCreatedChanging(value);
				this.SendPropertyChanging();
				this._PostCreated = value;
				this.SendPropertyChanged("PostCreated");
				this.OnPostCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_ReplyCount", DbType="Int NOT NULL")]
	public int ReplyCount
	{
		get
		{
			return this._ReplyCount;
		}
		set
		{
			if ((this._ReplyCount != value))
			{
				this.OnReplyCountChanging(value);
				this.SendPropertyChanging();
				this._ReplyCount = value;
				this.SendPropertyChanged("ReplyCount");
				this.OnReplyCountChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
	public bool Deleted
	{
		get
		{
			return this._Deleted;
		}
		set
		{
			if ((this._Deleted != value))
			{
				this.OnDeletedChanging(value);
				this.SendPropertyChanging();
				this._Deleted = value;
				this.SendPropertyChanged("Deleted");
				this.OnDeletedChanged();
			}
		}
	}
	
	[Association(Name="ShackUser_BookMark", Storage="_ShackUser", ThisKey="UserID", IsForeignKey=true)]
	public ShackUser ShackUser
	{
		get
		{
			return this._ShackUser.Entity;
		}
		set
		{
			ShackUser previousValue = this._ShackUser.Entity;
			if (((previousValue != value) 
						|| (this._ShackUser.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ShackUser.Entity = null;
					previousValue.BookMarks.Remove(this);
				}
				this._ShackUser.Entity = value;
				if ((value != null))
				{
					value.BookMarks.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("ShackUser");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ShackUsers")]
public partial class ShackUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _UserName;
	
	private System.DateTime _LastDbPull;
	
	private string _Password;
	
	private bool _EnableThreadedView;
	
	private bool _EnableThreadTextDisplay;
	
	private int _TimeAdjustment;
	
	private EntitySet<BookMark> _BookMarks;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLastDbPullChanging(System.DateTime value);
    partial void OnLastDbPullChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEnableThreadedViewChanging(bool value);
    partial void OnEnableThreadedViewChanged();
    partial void OnEnableThreadTextDisplayChanging(bool value);
    partial void OnEnableThreadTextDisplayChanged();
    partial void OnTimeAdjustmentChanging(int value);
    partial void OnTimeAdjustmentChanged();
    #endregion
	
	public ShackUser()
	{
		this._BookMarks = new EntitySet<BookMark>(new Action<BookMark>(this.attach_BookMarks), new Action<BookMark>(this.detach_BookMarks));
		OnCreated();
	}
	
	[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_LastDbPull", DbType="DateTime NOT NULL")]
	public System.DateTime LastDbPull
	{
		get
		{
			return this._LastDbPull;
		}
		set
		{
			if ((this._LastDbPull != value))
			{
				this.OnLastDbPullChanging(value);
				this.SendPropertyChanging();
				this._LastDbPull = value;
				this.SendPropertyChanged("LastDbPull");
				this.OnLastDbPullChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_EnableThreadedView", DbType="Bit NOT NULL")]
	public bool EnableThreadedView
	{
		get
		{
			return this._EnableThreadedView;
		}
		set
		{
			if ((this._EnableThreadedView != value))
			{
				this.OnEnableThreadedViewChanging(value);
				this.SendPropertyChanging();
				this._EnableThreadedView = value;
				this.SendPropertyChanged("EnableThreadedView");
				this.OnEnableThreadedViewChanged();
			}
		}
	}
	
	[Column(Storage="_EnableThreadTextDisplay", DbType="Bit NOT NULL")]
	public bool EnableThreadTextDisplay
	{
		get
		{
			return this._EnableThreadTextDisplay;
		}
		set
		{
			if ((this._EnableThreadTextDisplay != value))
			{
				this.OnEnableThreadTextDisplayChanging(value);
				this.SendPropertyChanging();
				this._EnableThreadTextDisplay = value;
				this.SendPropertyChanged("EnableThreadTextDisplay");
				this.OnEnableThreadTextDisplayChanged();
			}
		}
	}
	
	[Column(Storage="_TimeAdjustment", DbType="Int NOT NULL")]
	public int TimeAdjustment
	{
		get
		{
			return this._TimeAdjustment;
		}
		set
		{
			if ((this._TimeAdjustment != value))
			{
				this.OnTimeAdjustmentChanging(value);
				this.SendPropertyChanging();
				this._TimeAdjustment = value;
				this.SendPropertyChanged("TimeAdjustment");
				this.OnTimeAdjustmentChanged();
			}
		}
	}
	
	[Association(Name="ShackUser_BookMark", Storage="_BookMarks", OtherKey="UserID")]
	public EntitySet<BookMark> BookMarks
	{
		get
		{
			return this._BookMarks;
		}
		set
		{
			this._BookMarks.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BookMarks(BookMark entity)
	{
		this.SendPropertyChanging();
		entity.ShackUser = this;
	}
	
	private void detach_BookMarks(BookMark entity)
	{
		this.SendPropertyChanging();
		entity.ShackUser = null;
	}
}
#pragma warning restore 1591
